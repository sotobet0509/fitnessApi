import {MigrationInterface, QueryRunner} from "typeorm";

export class Comentarios1623688537461 implements MigrationInterface {
    name = 'Comentarios1623688537461'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query("CREATE TABLE `folios` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico del folio', `folio` varchar(255) NOT NULL COMMENT 'Código para reclamar un folio', `isAviable` tinyint NOT NULL COMMENT 'Bandera para indicar si el folio ya fue reclamado' DEFAULT 1, `purchase` int NOT NULL COMMENT 'Compra a la que pertenece el folio', `createdAt` datetime(6) NOT NULL COMMENT 'Fecha en que fue creada el folio' DEFAULT CURRENT_TIMESTAMP(6), `redeemAt` datetime NULL COMMENT 'Fecha en que fue reclamado el folio', `expirationDate` datetime NOT NULL COMMENT 'Fecha en que expira el folio', `clientName` varchar(255) NOT NULL COMMENT 'Nombre del cliente al que pertenece el folio', `alternate_users_id` varchar(36) NULL COMMENT 'Identificador del tipo UUID del usuario colaborador', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `alternate_Users` (`id` varchar(36) NOT NULL COMMENT 'Identificador del tipo UUID del usuario colaborador', `email` varchar(255) NOT NULL COMMENT 'Correo electrónico del usuario colaborador', `password` varchar(255) NOT NULL COMMENT '	Contraseña haseada del usuario colaborador', `name` varchar(255) NOT NULL COMMENT 'Nombre del usuario colaborador', `contact` varchar(255) NULL COMMENT 'Datos de contacto del usuario colaborador', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `blackList` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico de la lista negra', `token` varchar(255) NOT NULL COMMENT 'Token del usuario a ingresar en lista negra', `createdAt` datetime(6) NOT NULL COMMENT 'Fecha en que se ingreso a la lista negra' DEFAULT CURRENT_TIMESTAMP(6), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `bundles` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico del paquete', `name` varchar(255) NOT NULL COMMENT 'Nombre del paquete', `price` float NOT NULL COMMENT 'Precio de lista del paquete', `offer` float NULL COMMENT 'Precio de oferta del paquete', `description` varchar(255) NOT NULL COMMENT 'Información del contenido del paquete', `classNumber` int NOT NULL COMMENT 'Número de clases que incluye el paquete', `expirationDays` int NOT NULL COMMENT 'Número de días de vigencia del paquete', `passes` int NOT NULL COMMENT 'Número de pases que incluye el paquete', `isDeleted` tinyint NOT NULL COMMENT 'Borrado logico del paquete', `isRecurrent` tinyint NOT NULL COMMENT 'Bandera para compras recurrentes', `isUnlimited` tinyint NOT NULL COMMENT 'Bandera para indicar si el paquete tiene clases ilimitadas' DEFAULT 0, `isEspecial` tinyint NOT NULL COMMENT 'Bandera para indicar si el paquete es especial' DEFAULT 0, `especialDescription` varchar(255) NULL COMMENT 'Información del contenido extra del paquete especial', `promotionExpirationDays` int NULL COMMENT 'Duración en días de la promoción', `pictureUrl` varchar(255) NULL COMMENT 'Path de la imagen del paquete especial', `altermateUserId` int NULL COMMENT 'Identificador del usuario colaborador del paquete especial', `max` int NOT NULL COMMENT 'Número de veces que se puede comprar un paquete en una sola compra desde el administrador' DEFAULT 1, `memberLimit` int NOT NULL COMMENT 'Número de miembros que acepta el paquete grupal' DEFAULT 0, `isGroup` tinyint NOT NULL COMMENT 'Bandera para indicar si el paquete es individual o de grupo' DEFAULT 0, PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `transactions` (`id` varchar(36) NOT NULL COMMENT 'Identificador del tipo UUID de la transacción', `voucher` varchar(255) NULL COMMENT 'Identificador que corresponde a la transacción realizada por evopayments', `date` datetime NOT NULL COMMENT 'Fecha de creación de la transacción', `invoice` tinyint NOT NULL COMMENT 'Bandera para indicar si se requiere factura', `total` float NOT NULL COMMENT 'Monto total de la transacción', `comments` text NULL COMMENT 'Campo para ingresar inforamción extra de la transacción', `purchases_id` int NULL COMMENT 'Identificador numérico de la compra', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `payment_methods` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'identificador numérico del metodo de pago', `name` varchar(255) NOT NULL COMMENT 'Nombre del método de pago', `type` enum ('efectivo', 'tarjeta') NOT NULL COMMENT 'Tipo de método de pago', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `classesHistory` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico del historial de clases y pases tomados por el cliente', `takenClasses` int NOT NULL COMMENT 'Número de clases individuales tomadas', `takenPasses` int NOT NULL COMMENT 'Número de pases individuales tomados', `takenGroupClasses` int NOT NULL COMMENT 'Número de clases grupales tomadas', `userId` varchar(36) NULL COMMENT 'Identificador del tipo UUID del usuario', UNIQUE INDEX `REL_47fa569dfb9baab89f3f56d872` (`userId`), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `survey1` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico del cuestionario', `device` enum ('Mobile', 'Desktop') NOT NULL COMMENT 'Dispositivo desde el que se realizó la compra', `browser` varchar(255) NOT NULL COMMENT 'Navegador desde el que se realizó la compra', `conection` enum ('Mobile', 'WiFi') NOT NULL COMMENT 'Tipo de Acceso a internet con el que se realizó la compra', `description` text NOT NULL COMMENT 'Detelles de lo sucedido durante la compra', `url` varchar(255) NULL COMMENT 'Path donde se encuentra la imagen de evidencia de lo sucedido durante la compra', `createdAt` datetime(6) NOT NULL COMMENT 'Fecha en la que se registro la encuesta' DEFAULT CURRENT_TIMESTAMP(6), `userId` varchar(36) NULL COMMENT 'Identificador del tipo UUID del usuario', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `user_items` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador de tabla intermedia de Items y categorias', `name` varchar(255) NOT NULL COMMENT 'Nombre del item', `description` varchar(255) NULL COMMENT 'Información del item', `pictureUrl` varchar(255) NOT NULL COMMENT '	Path de la imagen del item', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `categories` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico de las categorías', `name` varchar(255) NOT NULL COMMENT 'Nombre de la categoría', `description` varchar(255) NULL COMMENT 'Descripción de la categoría', `type` varchar(255) NOT NULL COMMENT 'Tipo de categoría', `user_items_id` int NULL COMMENT 'Identificador de tabla intermedia de Items y categorias', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `user_categories` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador de tabla intermedia de Items y categorias', `User_id` varchar(36) NULL COMMENT 'Identificador del tipo UUID del usuario', `Categories_id` int NULL COMMENT 'Identificador numérico de las categorías', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `users` (`id` varchar(36) NOT NULL COMMENT 'Identificador del tipo UUID del usuario', `name` varchar(255) NOT NULL COMMENT 'Nombre del usuario', `email` varchar(255) NOT NULL COMMENT 'Correo electrónico del usuario', `lastname` varchar(255) NULL COMMENT 'Apellido del usuario', `password` varchar(255) NULL COMMENT 'Contraseña del usuario hasheada', `pictureUrl` text NULL COMMENT 'Path de la foto de perfil del usuario', `facebookId` varchar(255) NULL COMMENT 'Contraseña del usuario hasheada', `googleId` varchar(255) NULL COMMENT 'Identificador para usuarios registrados por google', `tempToken` varchar(255) NULL COMMENT 'Token temporal cambio de contraseñas', `isAdmin` tinyint NOT NULL COMMENT 'Bandera para indicar si el usuario es administrador' DEFAULT 0, `isDeleted` tinyint NOT NULL COMMENT 'Borrado logico del usuario' DEFAULT 0, `createdAt` datetime(6) NOT NULL COMMENT 'Fecha en que se registro el usuario' DEFAULT CURRENT_TIMESTAMP(6), `isLeader` tinyint NOT NULL COMMENT 'Bandera para indicar si es lider de un paquete grupal' DEFAULT 0, `fromGroup` varchar(255) NULL COMMENT 'Identificador del usuario lider del grupo al que pertence el usuario', `groupName` varchar(255) NULL COMMENT 'Nombre del grupo al que pertenece el usuario', `changed` int NOT NULL COMMENT 'Cambios disponibles para editar el grupo' DEFAULT 0, PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `purchases` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico de la compra', `date` datetime NOT NULL COMMENT 'Fecha en que es registrada la compra', `addedClasses` int NOT NULL COMMENT 'Número de clases extra o descontadas de la compra' DEFAULT 0, `addedPasses` int NOT NULL COMMENT 'Número de pases extra o descontadas de la compra' DEFAULT 0, `isCanceled` tinyint NOT NULL COMMENT 'Bandera para cancelar compras' DEFAULT 0, `expirationDate` datetime NULL COMMENT 'Fecha en que expira la compra del paquete' DEFAULT '1990-01-01 00:00:00', `status` enum ('Pendiente', 'Error', 'Completada', 'Cancelada') NULL COMMENT 'Estado en el que se encuentra la compra', `pendingAmount` float NOT NULL COMMENT 'Monto del paquete cuando fue iniciada la compra' DEFAULT 0, `operationIds` varchar(255) NOT NULL COMMENT 'Identificador que corresponde a la transacción realizada por evopayments', `bundles_id` int NULL COMMENT 'Identificador numérico del paquete', `payment_metods_id` int NULL COMMENT 'identificador numérico del metodo de pago', `users_id` varchar(36) NULL COMMENT 'Identificador del tipo UUID del usuario', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `instructors` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico de instructor', `name` varchar(255) NOT NULL COMMENT 'Nombre del instructor', `lastname` varchar(255) NOT NULL COMMENT 'Apellido del instructor', `description` text NOT NULL COMMENT 'Inforamación que se quiere dar a conocer del instructor', `profilePicture` text NOT NULL COMMENT 'Path donde se localiza la foto de perfil del instructor', `largePicture` text NOT NULL COMMENT 'Path donde se encuentra la imagen que se muestra al entrar a detalles de instructor', `isDeleted` tinyint NOT NULL COMMENT 'Borrado logico del instructor', `isVisible` tinyint NOT NULL COMMENT 'Bandera para indicar si el instructor se muestra' DEFAULT 1, `createdAt` datetime(6) NOT NULL COMMENT 'Fecha en que fue dado de alta el instructor' DEFAULT CURRENT_TIMESTAMP(6), `email` varchar(255) NULL COMMENT 'Correo electrónico del instructor (sirve para hacer Login)', `password` varchar(255) NULL COMMENT 'Contraseña haseada para hacer login como instructor', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `locations` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico de la locación', `name` varchar(255) NOT NULL COMMENT 'Nombre de la locación', `address` text NOT NULL COMMENT 'Dirección de la locación', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `seats` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico del asiento', `number` varchar(255) NOT NULL COMMENT 'Número del asiento', `rooms_id` int NULL COMMENT 'Identificador numérico del salón', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `rooms` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico del salón', `name` varchar(255) NOT NULL COMMENT 'Nombre del salon', `description` text NOT NULL COMMENT 'Descripción del salón', `locations_id` int NULL COMMENT 'Identificador numérico de la locación', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `schedules` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico del horario', `date` datetime NOT NULL COMMENT 'Fecha en que se dara la clase', `end` time NOT NULL COMMENT 'Hora en que termina la clase', `start` time NOT NULL COMMENT 'Hora en que comienza la clase', `theme` varchar(255) NULL COMMENT 'Tematica de la clase', `isPrivate` tinyint NOT NULL COMMENT 'Bandera que indica si la clase es publica o privada' DEFAULT 0, `instructors_id` int NULL COMMENT 'Identificador numérico de instructor', `roomsId` int NULL COMMENT 'Identificador numérico del salón', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `bookings` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico de la reservación', `isPass` tinyint NOT NULL COMMENT 'Bandera para indicar si es reservación de tipo Clase o Pase' DEFAULT 0, `createdAt` datetime(6) NOT NULL COMMENT 'Fecha en la que fue creada la reservación' DEFAULT CURRENT_TIMESTAMP(6), `assistance` tinyint NOT NULL COMMENT 'Bandera para pasar lista de los usuarios que acuden a la clase' DEFAULT 0, `schedules_id` int NULL COMMENT 'Identificador numérico del horario', `seats_id` int NULL COMMENT 'Identificador numérico del asiento', `user_id` varchar(36) NULL COMMENT 'Identificador del tipo UUID del usuario', `fromPurchase` int NULL COMMENT 'Identificador numérico de la compra', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `discounts` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador del descuento', `description` varchar(255) NOT NULL COMMENT 'Motivo del descuento', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `images` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico de la imagen', `url` varchar(255) NOT NULL COMMENT 'Path de la imagen', `status` tinyint NOT NULL COMMENT 'Bandera para indicar si la imagen esta activa o no' DEFAULT 1, `section` varchar(255) NULL COMMENT 'Sección a la que pertenece la imagen', `name` varchar(255) NOT NULL COMMENT 'Nombre de la imagen', PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("CREATE TABLE `versions` (`id` int NOT NULL AUTO_INCREMENT COMMENT 'Identificador numérico de la versión', `version` int NOT NULL COMMENT 'Número de versión', `createdAt` datetime(6) NOT NULL COMMENT 'Fecha en que fue creada la versión' DEFAULT CURRENT_TIMESTAMP(6), PRIMARY KEY (`id`)) ENGINE=InnoDB");
        await queryRunner.query("ALTER TABLE `folios` ADD CONSTRAINT `FK_eef86d0781caf0af53c7b36bc17` FOREIGN KEY (`alternate_users_id`) REFERENCES `alternate_Users`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `transactions` ADD CONSTRAINT `FK_ff9c524856f36515985a8015cb8` FOREIGN KEY (`purchases_id`) REFERENCES `purchases`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `classesHistory` ADD CONSTRAINT `FK_47fa569dfb9baab89f3f56d8720` FOREIGN KEY (`userId`) REFERENCES `users`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `survey1` ADD CONSTRAINT `FK_6978f3100dddc644faaa71152de` FOREIGN KEY (`userId`) REFERENCES `users`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `categories` ADD CONSTRAINT `FK_9b7d3d8bc0ed7588cf344746100` FOREIGN KEY (`user_items_id`) REFERENCES `user_items`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `user_categories` ADD CONSTRAINT `FK_011a48c21d9c70cab6ea18b120f` FOREIGN KEY (`User_id`) REFERENCES `users`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `user_categories` ADD CONSTRAINT `FK_13a509fe06beaa47f74f71254ea` FOREIGN KEY (`Categories_id`) REFERENCES `categories`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `purchases` ADD CONSTRAINT `FK_55c02fe57a6390a2a922a502439` FOREIGN KEY (`bundles_id`) REFERENCES `bundles`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `purchases` ADD CONSTRAINT `FK_bd94b6931ce72cce6cc3bed2605` FOREIGN KEY (`payment_metods_id`) REFERENCES `payment_methods`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `purchases` ADD CONSTRAINT `FK_0ffd5cad11314f31a377e0a060c` FOREIGN KEY (`users_id`) REFERENCES `users`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `seats` ADD CONSTRAINT `FK_fb50bf5e21a79337fa688489cf9` FOREIGN KEY (`rooms_id`) REFERENCES `rooms`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `rooms` ADD CONSTRAINT `FK_0178c51847d16edcc783f2f2190` FOREIGN KEY (`locations_id`) REFERENCES `locations`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `schedules` ADD CONSTRAINT `FK_6d282c3c17477bc4372d112fb55` FOREIGN KEY (`instructors_id`) REFERENCES `instructors`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `schedules` ADD CONSTRAINT `FK_18b6669d41a00bcec0a1ac9cd18` FOREIGN KEY (`roomsId`) REFERENCES `rooms`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `bookings` ADD CONSTRAINT `FK_b520d11ac6fd38ae4bcbaedf576` FOREIGN KEY (`schedules_id`) REFERENCES `schedules`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `bookings` ADD CONSTRAINT `FK_295d6175faf90cbd3e0060f8eb5` FOREIGN KEY (`seats_id`) REFERENCES `seats`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `bookings` ADD CONSTRAINT `FK_64cd97487c5c42806458ab5520c` FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
        await queryRunner.query("ALTER TABLE `bookings` ADD CONSTRAINT `FK_f02fb9e7b4c09d43a7d18465cbf` FOREIGN KEY (`fromPurchase`) REFERENCES `purchases`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION");
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query("ALTER TABLE `bookings` DROP FOREIGN KEY `FK_f02fb9e7b4c09d43a7d18465cbf`");
        await queryRunner.query("ALTER TABLE `bookings` DROP FOREIGN KEY `FK_64cd97487c5c42806458ab5520c`");
        await queryRunner.query("ALTER TABLE `bookings` DROP FOREIGN KEY `FK_295d6175faf90cbd3e0060f8eb5`");
        await queryRunner.query("ALTER TABLE `bookings` DROP FOREIGN KEY `FK_b520d11ac6fd38ae4bcbaedf576`");
        await queryRunner.query("ALTER TABLE `schedules` DROP FOREIGN KEY `FK_18b6669d41a00bcec0a1ac9cd18`");
        await queryRunner.query("ALTER TABLE `schedules` DROP FOREIGN KEY `FK_6d282c3c17477bc4372d112fb55`");
        await queryRunner.query("ALTER TABLE `rooms` DROP FOREIGN KEY `FK_0178c51847d16edcc783f2f2190`");
        await queryRunner.query("ALTER TABLE `seats` DROP FOREIGN KEY `FK_fb50bf5e21a79337fa688489cf9`");
        await queryRunner.query("ALTER TABLE `purchases` DROP FOREIGN KEY `FK_0ffd5cad11314f31a377e0a060c`");
        await queryRunner.query("ALTER TABLE `purchases` DROP FOREIGN KEY `FK_bd94b6931ce72cce6cc3bed2605`");
        await queryRunner.query("ALTER TABLE `purchases` DROP FOREIGN KEY `FK_55c02fe57a6390a2a922a502439`");
        await queryRunner.query("ALTER TABLE `user_categories` DROP FOREIGN KEY `FK_13a509fe06beaa47f74f71254ea`");
        await queryRunner.query("ALTER TABLE `user_categories` DROP FOREIGN KEY `FK_011a48c21d9c70cab6ea18b120f`");
        await queryRunner.query("ALTER TABLE `categories` DROP FOREIGN KEY `FK_9b7d3d8bc0ed7588cf344746100`");
        await queryRunner.query("ALTER TABLE `survey1` DROP FOREIGN KEY `FK_6978f3100dddc644faaa71152de`");
        await queryRunner.query("ALTER TABLE `classesHistory` DROP FOREIGN KEY `FK_47fa569dfb9baab89f3f56d8720`");
        await queryRunner.query("ALTER TABLE `transactions` DROP FOREIGN KEY `FK_ff9c524856f36515985a8015cb8`");
        await queryRunner.query("ALTER TABLE `folios` DROP FOREIGN KEY `FK_eef86d0781caf0af53c7b36bc17`");
        await queryRunner.query("DROP TABLE `versions`");
        await queryRunner.query("DROP TABLE `images`");
        await queryRunner.query("DROP TABLE `discounts`");
        await queryRunner.query("DROP TABLE `bookings`");
        await queryRunner.query("DROP TABLE `schedules`");
        await queryRunner.query("DROP TABLE `rooms`");
        await queryRunner.query("DROP TABLE `seats`");
        await queryRunner.query("DROP TABLE `locations`");
        await queryRunner.query("DROP TABLE `instructors`");
        await queryRunner.query("DROP TABLE `purchases`");
        await queryRunner.query("DROP TABLE `users`");
        await queryRunner.query("DROP TABLE `user_categories`");
        await queryRunner.query("DROP TABLE `categories`");
        await queryRunner.query("DROP TABLE `user_items`");
        await queryRunner.query("DROP TABLE `survey1`");
        await queryRunner.query("DROP INDEX `REL_47fa569dfb9baab89f3f56d872` ON `classesHistory`");
        await queryRunner.query("DROP TABLE `classesHistory`");
        await queryRunner.query("DROP TABLE `payment_methods`");
        await queryRunner.query("DROP TABLE `transactions`");
        await queryRunner.query("DROP TABLE `bundles`");
        await queryRunner.query("DROP TABLE `blackList`");
        await queryRunner.query("DROP TABLE `alternate_Users`");
        await queryRunner.query("DROP TABLE `folios`");
    }

}
